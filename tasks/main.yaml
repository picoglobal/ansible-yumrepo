---

- name: Test distribution
  assert:
    that: ansible_os_family == "RedHat"

- name: Create playbook-unique fact
  set_fact:
    yumrepo_unique: "{{ ansible_date_time.iso8601_micro }}"
  when: yumrepo_unique is not defined

- name: Configure additional repos in /etc/yum.repos.d/
  template:
    src: yum_repo.j2
    dest: /etc/yum.repos.d/{{ item.key }}.repo
  register: repo_file
  with_dict: "{{ yumrepo_repos }}"
  when: yumrepo_repos.keys() | length > 0
  notify:
    - Delete unmanaged repos

- name: Import GPG key if specified
  rpm_key:
    state: present
    key: "{{ item.value.gpgkey |
      replace('$releasever', ansible_distribution_major_version) |
      replace('$arch', ansible_architecture) |
      replace('$basearch', ansible_architecture) }}"
  with_dict: "{{ yumrepo_repos }}"
  when: >
    item.value.gpgkey is defined and
    item.value.gpgcheck == 1

- name: Create temporal directory
  file:
    path: /tmp/ansible.yumrepo.{{ yumrepo_unique }}
    state: directory
  changed_when: False
  when: yumrepo_manage

- name: Create fragments for repos to be ignored
  lineinfile:
    line: "{{ item }}"
    dest: /tmp/ansible.yumrepo.{{ yumrepo_unique }}/{{ item }}
    create: yes
    state: present
  with_items: "{{ yumrepo_ignore_repos }}"
  changed_when: False
  when: >
    yumrepo_manage and
    yumrepo_ignore_repos | length > 0

- name: Create fragment files
  lineinfile:
    line: "{{ item.key }}.repo"
    dest: /tmp/ansible.yumrepo.{{ yumrepo_unique }}/{{ item.key }}
    create: yes
    state: present
  with_dict: "{{ yumrepo_repos }}"
  changed_when: False
  when: >
    yumrepo_manage and
    yumrepo_repos.keys() | length > 0

- name: Touch the .processed file
  shell: touch /tmp/ansible.yumrepo.{{ yumrepo_unique }}/.processed
  changed_when: False
  when: >
    yumrepo_manage and
    not yumrepo_finish

- name: Check if the the .processed file exists
  stat:
    path: /tmp/ansible.yumrepo.{{ yumrepo_unique }}/.processed
  register: processed
  when: yumrepo_manage

- name: Create managed file
  assemble:
    src: /tmp/ansible.yumrepo.{{ yumrepo_unique }}
    dest: /etc/yum.repos.d/.managed
    regexp: '^[^\.].*'
  when: >
    yumrepo_manage and
    processed.stat.exists and
    yumrepo_finish
  notify:
    - Delete unmanaged repos

- name: Test if there is some unmanaged repo
  shell: >
    [ $(md5sum /etc/yum.repos.d/.managed | cut -f1 -d' ') == $(ls -1 *.repo | md5sum | cut -f1 -d' ') ] && true || false
  register: repos_changed
  args:
    chdir: /etc/yum.repos.d
    executable: /bin/bash
  failed_when: False
  changed_when: repos_changed.rc
  notify:
    - Delete unmanaged repos
  when: >
    yumrepo_manage and
    yumrepo_finish

- name: Delete the fragment directory
  shell: rm -fr "/tmp/ansible.yumrepo.{{ yumrepo_unique }}"
  changed_when: False
  when: >
    yumrepo_manage and
    yumrepo_finish

- name: Clean yum cache
  shell: yum clean all
  changed_when: False
  when: repo_file and repo_file.changed
